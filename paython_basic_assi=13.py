# -*- coding: utf-8 -*-
"""paython basic assi=13

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-4Pi7fLQiIxbvoQNfCdNhIRYJt37-mAW
"""



"""Question 1:
Write a program that calculates and prints the value according to the given formula:
Q = Square root of [(2 * C * D)/H]
Following are the fixed values of C and H:
C is 50. H is 30.
D is the variable whose values should be input to your program in a comma-separated
sequence.
Example
Let us assume the following comma separated input sequence is given to the program:
100,150,180
The output of the program should be:
18,22,24


"""

import math

def calculate_q(input_sequence, C, H):
    output_values = []

    for D in input_sequence:
        Q = math.sqrt((2 * C * int(D)) / H)
        output_values.append(round(Q))

    return output_values

# Fixed values of C and H
C = 50
H = 30

# Input sequence
input_sequence = input("Enter comma-separated values of D: ").split(',')

# Calculate and print the output
output = calculate_q(input_sequence, C, H)
print(','.join(map(str, output)))

"""Question 2:
Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The
element value in the i-th row and j-th column of the array should be i*j.
Note: i=0,1.., X-1; j=0,1,Â¡Y-1.
Example
Suppose the following inputs are given to the program:
3,5
Then, the output of the program should be:
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]
"""

def generate_2d_array(X, Y):
    array_2d = [[i * j for j in range(Y)] for i in range(X)]
    return array_2d

# Input X and Y
X, Y = map(int, input("Enter two digits X and Y (comma-separated): ").split(','))

# Generate and print the 2-dimensional array
output_array = generate_2d_array(X, Y)
for row in output_array:
    print(row)
[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]

"""Question 3:
Write a program that accepts a comma separated sequence of words as input and prints the
words in a comma-separated sequence after sorting them alphabetically.
Suppose the following input is supplied to the program:
without,hello,bag,world
Then, the output should be:
bag,hello,without,world
"""

def sort_words(input_sequence):
    words = input_sequence.split(',')
    sorted_words = sorted(words)
    return ','.join(sorted_words)

# Input sequence of words
input_sequence = input("Enter comma-separated sequence of words: ")

# Sort and print the words alphabetically
output_sequence = sort_words(input_sequence)
print(output_sequence)

"""Question 4:
Write a program that accepts a sequence of whitespace separated words as input and prints
the words after removing all duplicate words and sorting them alphanumerically.
Suppose the following input is supplied to the program:
hello world and practice makes perfect and hello world again
Then, the output should be:
again and hello makes perfect practice world
"""

def remove_duplicates_and_sort(input_sequence):
    words = input_sequence.split()
    unique_words = sorted(set(words))
    return ' '.join(unique_words)

# Input sequence of words
input_sequence = input("Enter whitespace-separated sequence of words: ")

# Remove duplicates and print the words sorted alphanumerically
output_sequence = remove_duplicates_and_sort(input_sequence)
print(output_sequence)

"""Question 5:
Write a program that accepts a sentence and calculate the number of letters and digits.
Suppose the following input is supplied to the program:
hello world! 123
Then, the output should be:
LETTERS 10
"""

def count_letters_and_digits(sentence):
    num_letters = sum(c.isalpha() for c in sentence)
    num_digits = sum(c.isdigit() for c in sentence)
    return num_letters

# Input sentence
sentence = input("Enter a sentence: ")

# Calculate the number of letters and digits and print the result
num_letters = count_letters_and_digits(sentence)
print("LETTERS", num_letters)

"""Question 6:
A website requires the users to input username and password to register. Write a program to
check the validity of password input by users.
Following are the criteria for checking the password:
1. At least 1 letter between [a-z]
2. At least 1 number between [0-9]
1. At least 1 letter between [A-Z]
3. At least 1 character from [$#@]
4. Minimum length of transaction password: 6
5. Maximum length of transaction password: 12
Your program should accept a sequence of comma separated passwords and will check them
according to the above criteria. Passwords that match the criteria are to be printed, each
separated by a comma.
Example
If the following passwords are given as input to the program:
ABd1234@1,a F1#,2w3E*,2We3345
Then, the output of the program should be:

ABd1234@1
"""

import re

def is_valid_password(password):
    # Check if the password meets all the criteria
    if (
        re.search("[a-z]", password)
        and re.search("[0-9]", password)
        and re.search("[A-Z]", password)
        and re.search("[$#@]", password)
        and 6 <= len(password) <= 12
    ):
        return True
    return False

# Input sequence of passwords
passwords = input("Enter comma-separated passwords: ").split(',')

# Check and print the valid passwords
valid_passwords = [password for password in passwords if is_valid_password(password)]
print(','.join(valid_passwords))